/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const dashboardRouteLazyImport = createFileRoute('/__dashboard')()
const publicIndexLazyImport = createFileRoute('/__public/')()
const dashboardDatabasesIndexLazyImport = createFileRoute(
  '/__dashboard/databases/',
)()
const dashboardDatabasesNewIndexLazyImport = createFileRoute(
  '/__dashboard/databases/new/',
)()
const dashboardDatabasesDatabaseIndexLazyImport = createFileRoute(
  '/__dashboard/databases/$database/',
)()

// Create/Update Routes

const dashboardRouteLazyRoute = dashboardRouteLazyImport
  .update({
    id: '/__dashboard',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/__dashboard/route.lazy').then((d) => d.Route))

const publicIndexLazyRoute = publicIndexLazyImport
  .update({
    id: '/__public/',
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/__public/index.lazy').then((d) => d.Route))

const dashboardDatabasesIndexLazyRoute = dashboardDatabasesIndexLazyImport
  .update({
    id: '/databases/',
    path: '/databases/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/databases/index.lazy').then((d) => d.Route),
  )

const dashboardDatabasesNewIndexLazyRoute = dashboardDatabasesNewIndexLazyImport
  .update({
    id: '/databases/new/',
    path: '/databases/new/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/databases/new/index.lazy').then(
      (d) => d.Route,
    ),
  )

const dashboardDatabasesDatabaseIndexLazyRoute =
  dashboardDatabasesDatabaseIndexLazyImport
    .update({
      id: '/databases/$database/',
      path: '/databases/$database/',
      getParentRoute: () => dashboardRouteLazyRoute,
    } as any)
    .lazy(() =>
      import('./routes/__dashboard/databases/$database/index.lazy').then(
        (d) => d.Route,
      ),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__dashboard': {
      id: '/__dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof dashboardRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/__public/': {
      id: '/__public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/__dashboard/databases/': {
      id: '/__dashboard/databases/'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof dashboardDatabasesIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/databases/$database/': {
      id: '/__dashboard/databases/$database/'
      path: '/databases/$database'
      fullPath: '/databases/$database'
      preLoaderRoute: typeof dashboardDatabasesDatabaseIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/databases/new/': {
      id: '/__dashboard/databases/new/'
      path: '/databases/new'
      fullPath: '/databases/new'
      preLoaderRoute: typeof dashboardDatabasesNewIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
  }
}

// Create and export the route tree

interface dashboardRouteLazyRouteChildren {
  dashboardDatabasesIndexLazyRoute: typeof dashboardDatabasesIndexLazyRoute
  dashboardDatabasesDatabaseIndexLazyRoute: typeof dashboardDatabasesDatabaseIndexLazyRoute
  dashboardDatabasesNewIndexLazyRoute: typeof dashboardDatabasesNewIndexLazyRoute
}

const dashboardRouteLazyRouteChildren: dashboardRouteLazyRouteChildren = {
  dashboardDatabasesIndexLazyRoute: dashboardDatabasesIndexLazyRoute,
  dashboardDatabasesDatabaseIndexLazyRoute:
    dashboardDatabasesDatabaseIndexLazyRoute,
  dashboardDatabasesNewIndexLazyRoute: dashboardDatabasesNewIndexLazyRoute,
}

const dashboardRouteLazyRouteWithChildren =
  dashboardRouteLazyRoute._addFileChildren(dashboardRouteLazyRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof dashboardRouteLazyRouteWithChildren
  '/': typeof publicIndexLazyRoute
  '/databases': typeof dashboardDatabasesIndexLazyRoute
  '/databases/$database': typeof dashboardDatabasesDatabaseIndexLazyRoute
  '/databases/new': typeof dashboardDatabasesNewIndexLazyRoute
}

export interface FileRoutesByTo {
  '': typeof dashboardRouteLazyRouteWithChildren
  '/': typeof publicIndexLazyRoute
  '/databases': typeof dashboardDatabasesIndexLazyRoute
  '/databases/$database': typeof dashboardDatabasesDatabaseIndexLazyRoute
  '/databases/new': typeof dashboardDatabasesNewIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__dashboard': typeof dashboardRouteLazyRouteWithChildren
  '/__public/': typeof publicIndexLazyRoute
  '/__dashboard/databases/': typeof dashboardDatabasesIndexLazyRoute
  '/__dashboard/databases/$database/': typeof dashboardDatabasesDatabaseIndexLazyRoute
  '/__dashboard/databases/new/': typeof dashboardDatabasesNewIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/databases' | '/databases/$database' | '/databases/new'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/databases' | '/databases/$database' | '/databases/new'
  id:
    | '__root__'
    | '/__dashboard'
    | '/__public/'
    | '/__dashboard/databases/'
    | '/__dashboard/databases/$database/'
    | '/__dashboard/databases/new/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  dashboardRouteLazyRoute: typeof dashboardRouteLazyRouteWithChildren
  publicIndexLazyRoute: typeof publicIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  dashboardRouteLazyRoute: dashboardRouteLazyRouteWithChildren,
  publicIndexLazyRoute: publicIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__dashboard",
        "/__public/"
      ]
    },
    "/__dashboard": {
      "filePath": "__dashboard/route.lazy.tsx",
      "children": [
        "/__dashboard/databases/",
        "/__dashboard/databases/$database/",
        "/__dashboard/databases/new/"
      ]
    },
    "/__public/": {
      "filePath": "__public/index.lazy.tsx"
    },
    "/__dashboard/databases/": {
      "filePath": "__dashboard/databases/index.lazy.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/databases/$database/": {
      "filePath": "__dashboard/databases/$database/index.lazy.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/databases/new/": {
      "filePath": "__dashboard/databases/new/index.lazy.tsx",
      "parent": "/__dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
